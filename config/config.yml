global:
  hide_tables: [ '' ]
  default_server: "proxysql"
  read_only: false

servers:
  proxysql:
    dsn:
      host: "127.0.0.1"
      user: "admin"
      passwd: "admin"
      port: 6032
      db: "main"

#   proxysql_local_docker:
#     dsn:
#       host: "host.docker.internal"
#       user: "admin"
#       passwd: "admin"
#       port: "6032"
#       db: "main"
#     hide_tables: [ 'mysql_aws_aurora_hostgroups', 'mysql_server_aws_aurora_failovers', 'mysql_server_aws_aurora_check_status', 'mysql_server_group_replication_log', 'mysql_galera_hostgroups', 'runtime_mysql_galera_hostgroups', 'mysql_server_aws_aurora_log' , 'mysql_server_aws_aurora_log', 'runtime_mysql_aws_aurora_hostgroups', 'runtime_mysql_server_aws_aurora_failovers', 'runtime_mysql_server_aws_aurora_check_status', 'runtime_mysql_server_group_replication_log', 'runtime_mysql_server_aws_aurora_log', 'runtime_mysql_server_aws_aurora_log', 'mysql_collations', 'mysql_firewall_whitelist_rules', 'mysql_firewall_whitelist_sqli_fingerprints', 'mysql_firewall_whitelist_users', 'mysql_query_rules_fast_routing', 'mysql_group_replication_hostgroups', 'restapi_routes', 'runtime_mysql_collations', 'runtime_mysql_firewall_whitelist_rules', 'runtime_mysql_firewall_whitelist_sqli_fingerprints', 'runtime_mysql_firewall_whitelist_users', 'runtime_mysql_query_rules_fast_routing', 'runtime_mysql_group_replication_hostgroups', 'runtime_restapi_routes', 'scheduler','mysql_server_galera_log' ]
#
#   proxysql_local_docker_no_host:
#     dsn:
#       host: "172.17.0.1"
#       user: "radmin"
#       passwd: "radmin"
#       port: "6032"
#       db: "main"
#
#   proxysql_remote_read_only:
#     dsn:
#       host: "10.0.0.1"
#       user: "radmin"
#       passwd: "radmin"
#       port: "6032"
#       db: "main"
#     read_only: true
#
#   #it's possible to hide tables that won't be used  - like aurora, galera related ones
#   proxysql_remote_with_hidden_tables:
#     dsn:
#       host: "10.0.0.1",
#       user: "arthur",
#       passwd: "zaphod",
#       port: "6032",
#       db: "main"
#     hide_tables: [ 'mysql_aws_aurora_hostgroups', 'mysql_server_aws_aurora_failovers', 'mysql_server_aws_aurora_check_status', 'mysql_server_group_replication_log', 'mysql_galera_hostgroups', 'runtime_mysql_galera_hostgroups', 'mysql_server_aws_aurora_log' , 'mysql_server_aws_aurora_log', 'runtime_mysql_aws_aurora_hostgroups', 'runtime_mysql_server_aws_aurora_failovers', 'runtime_mysql_server_aws_aurora_check_status', 'runtime_mysql_server_group_replication_log', 'runtime_mysql_server_aws_aurora_log', 'runtime_mysql_server_aws_aurora_log', 'mysql_collations', 'mysql_firewall_whitelist_rules', 'mysql_firewall_whitelist_sqli_fingerprints', 'mysql_firewall_whitelist_users', 'mysql_query_rules_fast_routing', 'mysql_group_replication_hostgroups', 'restapi_routes', 'runtime_mysql_collations', 'runtime_mysql_firewall_whitelist_rules', 'runtime_mysql_firewall_whitelist_sqli_fingerprints', 'runtime_mysql_firewall_whitelist_users', 'runtime_mysql_query_rules_fast_routing', 'runtime_mysql_group_replication_hostgroups', 'runtime_restapi_routes', 'scheduler','mysql_server_galera_log' ]

misc:
  apply_config:
    - title: "LOAD EVERYTHING TO RUNTIME"
      info: "Load all config that is configured to the runtime datastructures. This means that the config will then be applied."
      sql: |
        LOAD MYSQL USERS TO RUNTIME;
        LOAD MYSQL SERVERS TO RUNTIME;
        LOAD MYSQL QUERY RULES TO RUNTIME;
        LOAD MYSQL VARIABLES TO RUNTIME;
        LOAD ADMIN VARIABLES TO RUNTIME;
        LOAD PROXYSQL SERVERS TO RUNTIME;
        LOAD SCHEDULER TO RUNTIME;

    - title: "SAVE EVERYTHING TO DISK"
      info: "Save all config that is configured to disk. This means that it will be loaded whenever ProxySQL restarts."
      sql: |
        SAVE MYSQL USERS TO DISK;
        SAVE MYSQL SERVERS TO DISK;
        SAVE MYSQL QUERY RULES TO DISK;
        SAVE MYSQL VARIABLES TO DISK;
        SAVE ADMIN VARIABLES TO DISK;
        SAVE PROXYSQL SERVERS TO DISK;
        SAVE SCHEDULER TO DISK;

    - title: "LOAD EVERYTHING FROM DISK"
      info: "Load all config that is configured on disk to memory. This resets the config in memory to the config on the disk. To then apply this to the runtime datastructures use \"LOAD EVERYTHING TO RUNTIME\"."
      sql: |
        LOAD MYSQL USERS FROM DISK;
        LOAD MYSQL SERVERS FROM DISK;
        LOAD MYSQL QUERY RULES FROM DISK;
        LOAD MYSQL VARIABLES FROM DISK;
        LOAD ADMIN VARIABLES FROM DISK;
        LOAD PROXYSQL SERVERS FROM DISK;
        LOAD SCHEDULER FROM DISK;

  update_config:
    - title: "Add a new mysql_query_rule"
      info: |
        Add a new rule to the mysql_query_rules table.
        https://proxysql.com/documentation/proxysql-configuration/
      sql: "INSERT INTO mysql_query_rules (rule_id, active, match_digest, destination_hostgroup, apply) VALUES (1, 1, '^SELECT.*FOR UPDATE', 1, 1), (2, 1, '^SELECT', 2, 1);"

    - title: "Update a global config variable"
      info: |
        Modify a variable.
        https://proxysql.com/documentation/proxysql-configuration/
      sql: "SET mysql-max_connections = '4096';"

    - title: "Set server to OFFLINE_SOFT status"
      info: |
        Set a server to OFFLINE_SOFT status.
        This status can be used to temporarily disable the server but finish running queries and transaction first.
        https://proxysql.com/documentation/proxysql-configuration/
      sql: >-
        UPDATE mysql_servers SET status='OFFLINE_SOFT' WHERE hostname='172.16.0.2';
        LOAD MYSQL SERVERS TO RUNTIME;

    - title: "Set server to ONLINE status"
      info: |
        Set a server to ONLINE status.
        https://proxysql.com/documentation/proxysql-configuration/
      sql: >-
        UPDATE mysql_servers SET status='ONLINE' WHERE hostname='172.16.0.2';
        LOAD MYSQL SERVERS TO RUNTIME;

  status:
    - title: "Show runtime server status"
      info: |
        Show the status of all servers in the runtime datastructures.
        https://proxysql.com/documentation/proxysql-configuration/
      sql: "SELECT * FROM runtime_mysql_servers ORDER BY hostgroup_id DESC, hostname DESC;"

    - title: "Show Galera log"
      info: |
        Show the Galera log.
        https://proxysql.com/documentation/proxysql-configuration/
      sql: "SELECT time_start_us, hostname, read_only, wsrep_desync, wsrep_reject_queries, error FROM mysql_server_galera_log GROUP BY hostname ORDER BY time_start_us DESC;"

    - title: "Show MySQL errors"
      info: "Show the MySQL errors."
      sql: "SELECT first_seen, last_seen, count_star, hostname, username, schemaname, errno, last_error FROM stats_mysql_errors ORDER BY first_seen DESC;"

  # The datatables javascript will order by desc by the first column so the first column the query return with should be the one in the order by expression
  adhoc_report:
    - title: "Top 10 SELECTs by sum_time"
      info: "Examining queries with big sum_time(number of execution * time to run) is a good place to start when optimizing queries."
      sql: "SELECT sum_time, digest, username, schemaname, SUBSTR(digest_text, 0, 80), count_star FROM stats_mysql_query_digest WHERE digest_text like 'SELECT%' ORDER BY sum_time DESC LIMIT 10;"

    - title: "Top 10 SELECTs by count_star"
      info: "Caching/rewriting/even removing frequently running queries can improve the overall performance significantly. ProxySQL supports all of these methods."
      sql: "SELECT count_star, digest, username, schemaname, SUBSTR(digest_text, 0, 80), sum_time FROM stats_mysql_query_digest WHERE digest_text like 'SELECT%' ORDER BY count_star DESC LIMIT 10;"

    - title: "Top 10 WRITE queries"
      info: "This helps identifying the most frequently running writes"
      sql: "SELECT count_star, digest, username, schemaname, SUBSTR(digest_text, 0, 80), sum_time FROM stats_mysql_query_digest where digest_text like 'INSERT%' or digest_text like 'DELETE%' or digest_text like 'UPDATE%' order by count_star DESC LIMIT 10;"

    - title: "Top 5 schemas by sum_time"
      info: "List of the schemas with the highest sum_time"
      sql: "SELECT sum(sum_time) as time_spent, schemaname FROM stats_mysql_query_digest group by schemaname order by time_spent desc limit 5;"

    - title: "Schemas with the most DMLs"
      info: "This helps identifying the schemas getting the most writes"
      sql: "SELECT sum(count_star) as sum_count_star, schemaname, sum(sum_time) as time_spent FROM stats_mysql_query_digest where digest_text like 'INSERT%' or digest_text like 'DELETE%' or digest_text like 'UPDATE%' group by schemaname order by time_spent desc;"

flask:
  SECRET_KEY: "12345678901234567890"
  SEND_FILE_MAX_AGE_DEFAULT: 0
  TEMPLATES_AUTO_RELOAD: "True"
